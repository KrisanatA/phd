[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PhD Meeting Notes",
    "section": "",
    "text": "Welcome",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "literature-review.html",
    "href": "literature-review.html",
    "title": "3  Literature Review",
    "section": "",
    "text": "3.1 Graphical discovery in stochastic actor-oriented models for social network analysis - Chapter 4\nMany R packages can manipulate network objects. However, they mainly focused on analysing network data and not necessarily on rendering visualisations of networks. Visualising network data using packages such as igraph, sna, and network requires much extra work if one is used to working with a data structure like vectors, data frames, or arrays. This chapter provides three different approaches to network visualisation through ggplot2 wrappers. The first is a function, ggnet2, from the ggally package that acts as a wrapper around a network object to create a ggplot2 graph. The second package, geomnet, combines all network pieces (nodes, edges, and labels) into a single geom and is intended to look the most like other ggplot2 geoms in use. The final package, ggnetwork, performs some data manipulation and aliases other geoms to layer the different network aspects on top of the other. Each of these packages also has different ways of dealing with the data structure.\nFor geomnet, it combines two sources of information, node description and the relationship between nodes (vertices), into one dataset using the fortify s3 methods. The supported classes are “network” from sna and network packages, “igraph” from the igraph package, “adjmat”, and “edgedf” (classes from geomnet). It is then passed on to the ggplot2 to draw the network data. On the other hand, ggnet2 and ggnetwork internally translate a network object into a data frame suitable for plotting with ggplot2, then apply network-related aesthetic operations to that data frame.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literature Review</span>"
    ]
  },
  {
    "objectID": "literature-review.html#hospital-transfer-network-structure-as-a-risk-factor-for-clostridium-defficile-infection",
    "href": "literature-review.html#hospital-transfer-network-structure-as-a-risk-factor-for-clostridium-defficile-infection",
    "title": "3  Literature Review",
    "section": "3.2 Hospital Transfer Network Structure as a Risk Factor for Clostridium defficile Infection",
    "text": "3.2 Hospital Transfer Network Structure as a Risk Factor for Clostridium defficile Infection",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Literature Review</span>"
    ]
  },
  {
    "objectID": "network-experiment.html",
    "href": "network-experiment.html",
    "title": "1  Network Analysis Experimentation",
    "section": "",
    "text": "1.1 27th Feb 2025\nThe toy dataset structure:\nnodes\nedges\n# loading the dataset\nload(here::here(\"data/toy/sim_network.RData\"))\nhead(edges)\n\n# A tibble: 6 × 4\n   from    to timestamp           reason         \n  &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;          \n1    16     9 2025-01-21 12:00:00 high_fever     \n2     1    12 2025-01-29 02:00:00 seizures       \n3    13     8 2025-02-10 05:00:00 breathing_issue\n4     6     4 2025-01-19 11:00:00 high_fever     \n5     7     1 2025-01-28 04:00:00 injury         \n6    19    20 2025-01-11 06:00:00 chest_pain     \n\nhead(nodes)\n\n# A tibble: 6 × 5\n     id   lat   lon type      size\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n1     1 -37.2  145. age_care   451\n2     2 -37.7  145. hospital   337\n3     3 -37.4  145. hospital   473\n4     4 -37.8  145. hospital   119\n5     5 -37.7  145. hospital   147\n6     6 -37.6  145. hospital   456",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Network Analysis Experimentation</span>"
    ]
  },
  {
    "objectID": "network-experiment.html#th-feb-2025",
    "href": "network-experiment.html#th-feb-2025",
    "title": "1  Network Analysis Experimentation",
    "section": "",
    "text": "id\nlat\nlon\ntype: either age_care or hospital\nsize\n\n\n\nfrom\nto\ntimestamp\nreason: chest pain, breathing issue, injury, stroke, seizures, and high fever (from ChatGPT)\n\n\n\n\n1.1.1 Trying geomnet package\nThe data structure for the geomnet package combines two sources of information, node description and the relationship between nodes (vertices), into one dataset using the fortify methods. The supported classes are “network” from sna and network packages, “igraph” from the igraph package, “adjmat”, and “edgedf” (classes from geomnet).\nThe as.edgedf() only works with data.frame object.\n\nedges &lt;- edges |&gt;\n    mutate(from = factor(from, levels = seq(1:20)),\n            to = factor(to, levels = seq(1:20)))\nnodes &lt;- nodes |&gt;\n    mutate(id = factor(id, levels = seq(1:20)))\n\nedges_data &lt;- as.data.frame(edges)\nnodes_data &lt;- as.data.frame(nodes)\n\nCombining the edges and nodes\n\nnetwork_data &lt;- fortify(as.edgedf(edges_data), nodes_data)\nhead(network_data)\n\ngeomnet package is not working.\n\n# Not working\nggplot(data = network_data, \n        aes(from_id = from_id, to_id = to_id)) +\n    geom_net()\n\nThere is a problem in the geom_net function where it said, “The first two columns of x must be of the same type.” It also happens with the provided code in the geomnet package. Still not sure why.\nhttps://rdrr.io/github/statnet/network/src/R/dataframe.R",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Network Analysis Experimentation</span>"
    ]
  },
  {
    "objectID": "network-experiment.html#th-mar-2025",
    "href": "network-experiment.html#th-mar-2025",
    "title": "1  Network Analysis Experimentation",
    "section": "1.2 6th Mar 2025",
    "text": "1.2 6th Mar 2025\n\n1.2.1 tidygraph\nThe tidygraph provides a tidy API for graph manipulation. The network data can be seen as two tidy tables, one for node data and one for edge data. This package provides a way to switch between the two tables and provides dplyr verbs for manipulating the data. A lot of graph algorithms in igraph is also accessible through this package.\n\ntidygraph_structure &lt;- tbl_graph(nodes, edges)\n\n\n1.2.1.1 Example\nChange the size to a thousand. It is somewhat similar to cubble where I must activate the table I want to manipulate.\n\ntidygraph_structure |&gt;\n    activate(nodes) |&gt;\n    mutate(size = size/1000) |&gt;\n    activate(edges) |&gt;\n    mutate(reason = toupper(reason))\n\n# A tbl_graph: 20 nodes and 92 edges\n#\n# A bipartite multigraph with 1 component\n#\n# Edge Data: 92 × 4 (active)\n    from    to timestamp           reason         \n   &lt;int&gt; &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;          \n 1    16     9 2025-01-21 12:00:00 HIGH_FEVER     \n 2     1    12 2025-01-29 02:00:00 SEIZURES       \n 3    13     8 2025-02-10 05:00:00 BREATHING_ISSUE\n 4     6     4 2025-01-19 11:00:00 HIGH_FEVER     \n 5     7     1 2025-01-28 04:00:00 INJURY         \n 6    19    20 2025-01-11 06:00:00 CHEST_PAIN     \n 7    18    10 2025-01-19 01:00:00 INJURY         \n 8    16    14 2025-01-31 20:00:00 CHEST_PAIN     \n 9    11    10 2025-02-06 15:00:00 HIGH_FEVER     \n10    10     6 2025-02-08 23:00:00 SEIZURES       \n# ℹ 82 more rows\n#\n# Node Data: 20 × 5\n  id      lat   lon type      size\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n1 1     -37.2  145. age_care 0.451\n2 2     -37.7  145. hospital 0.337\n3 3     -37.4  145. hospital 0.473\n# ℹ 17 more rows\n\n\n\n\n\n1.2.2 sfnetworks\nThe sfnetworks allow us to extend the graph into the domain of geospatial data analysis, where each observation has a location in geographical space. The sf package is the driving force for this package. It is one of the common packages used when working with geospatial data.\n\nnodes_sf &lt;- st_as_sf(nodes, coords = c(\"lat\", \"lon\"))\n\nsfnetwork_obj &lt;- sfnetwork(nodes_sf, edges)\n\nChecking if spatial network structure is valid...\n\n\nSpatial network structure is valid\n\n\n\n1.2.2.1 My first network plot\n\nautoplot(sfnetwork_obj)\n\nSpatially implicit edges are drawn as linesFALSE",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Network Analysis Experimentation</span>"
    ]
  },
  {
    "objectID": "network-experiment.html#th-mar-2025-1",
    "href": "network-experiment.html#th-mar-2025-1",
    "title": "1  Network Analysis Experimentation",
    "section": "1.3 13th Mar 2025",
    "text": "1.3 13th Mar 2025\n\n1.3.1 geospatial\nIt is the two sf objects, one describing the node and one describing the edge data. With the geospatial objects, there are many ways to specify the layouts in the ggraph.\n\n# loading caribou data\nload(here::here(\"data/caribou/caribou.RData\"))\n\n\nhead(locations)\n\n# A tibble: 6 × 7\n    event_id animal_id study_site season timestamp           longitude latitude\n       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;dttm&gt;                  &lt;dbl&gt;    &lt;dbl&gt;\n1 2259197332 GR_C01    Graham     Winter 2001-02-21 05:00:00     -123.     56.2\n2 2259197333 GR_C01    Graham     Winter 2001-02-21 09:00:00     -123.     56.2\n3 2259197334 GR_C01    Graham     Winter 2001-02-21 13:00:00     -123.     56.2\n4 2259197335 GR_C01    Graham     Winter 2001-02-21 17:01:00     -123.     56.2\n5 2259197336 GR_C01    Graham     Winter 2001-02-21 21:00:00     -123.     56.2\n6 2259197337 GR_C01    Graham     Winter 2001-02-22 01:00:00     -123.     56.2\n\nhead(individuals)\n\n# A tibble: 6 × 14\n  animal_id  sex   life_stage pregnant with_calf death_cause study_site \n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;lgl&gt;     &lt;chr&gt;       &lt;chr&gt;      \n1 HR_151.510 f     &lt;NA&gt;       NA       NA        &lt;NA&gt;        Hart Ranges\n2 GR_C04     f     &lt;NA&gt;       NA       NA        &lt;NA&gt;        Graham     \n3 GR_C03     f     &lt;NA&gt;       NA       NA        &lt;NA&gt;        Graham     \n4 HR_151.805 f     &lt;NA&gt;       NA       NA        &lt;NA&gt;        Hart Ranges\n5 HR_151.760 f     &lt;NA&gt;       NA       NA        &lt;NA&gt;        Hart Ranges\n6 HR_151.720 f     &lt;NA&gt;       NA       NA        &lt;NA&gt;        Hart Ranges\n# ℹ 7 more variables: deploy_on_longitude &lt;dbl&gt;, deploy_on_latitude &lt;dbl&gt;,\n#   deploy_on_comments &lt;chr&gt;, deploy_off_longitude &lt;dbl&gt;,\n#   deploy_off_latitude &lt;dbl&gt;, deploy_off_type &lt;chr&gt;, deploy_off_comments &lt;chr&gt;\n\n\nTrying one individual caribou.\n\n# for multiple caribous\nkeep &lt;- individuals |&gt; \n  filter(!is.na(death_cause)) |&gt; \n  pull(animal_id)\n\n# KE_car027\nke_car027 &lt;- locations |&gt; \n  filter(animal_id == \"KE_car027\") |&gt; \n  mutate(event_id = as.character(event_id)) |&gt; \n  arrange(animal_id, timestamp)\n\nmultiple_car &lt;- locations |&gt; \n  filter(animal_id %in% keep) |&gt; \n  mutate(event_id = as.character(event_id)) |&gt; \n  arrange(animal_id, timestamp)\n\nApparently, if the id column is double when joining the data using sfnetwork, R crashes. Since the event_id is “2282779430” storing it as double is too large. (this took me a long time to figure out)\n\nnodes &lt;- multiple_car |&gt; \n  select(event_id, latitude, longitude, season) |&gt; \n  rename(id = event_id)\n\nedges &lt;- multiple_car |&gt; \n  select(event_id, timestamp) |&gt; \n  mutate(to = lead(event_id)) |&gt; \n  rename(from = event_id) |&gt; \n  filter(!is.na(to))\n\nnodes_ke &lt;- ke_car027 |&gt; \n  select(event_id, latitude, longitude, season) |&gt; \n  rename(id = event_id)\n\nedges_ke &lt;- ke_car027 |&gt; \n  select(event_id, timestamp) |&gt; \n  mutate(to = lead(event_id)) |&gt; \n  rename(from = event_id) |&gt; \n  filter(!is.na(to))\n\nConverting the nodes to the sf object.\n\nnodes_sf &lt;- st_as_sf(nodes, coords = c(\"longitude\", \"latitude\"), crs = st_crs(4326))\n\n# combining nodes and edges\ncaribou_path &lt;- sfnetwork(nodes_sf, edges)\n\nChecking if spatial network structure is valid...\n\n\nSpatial network structure is valid\n\nnodes_ke_sf &lt;- st_as_sf(nodes_ke, coords = c(\"longitude\", \"latitude\"), crs = st_crs(4326))\n\nke_path &lt;- sfnetwork(nodes_ke_sf, edges_ke)\n\nChecking if spatial network structure is valid...\nSpatial network structure is valid\n\n\n\n\n1.3.2 Draw a plot using ggraph\nThe geospatial layout in the ggraph can be specified both as a function or data frame object.\n\n# function way\nlayout_sf &lt;- function(graph) {\n  graph &lt;- activate(graph, nodes)\n  x &lt;- sf::st_coordinates(graph)[, \"X\"]\n  y &lt;- sf::st_coordinates(graph)[, \"Y\"]\n  data.frame(x, y)\n}\n\n# data frame way\nx &lt;- sf::st_coordinates(ke_path)[, \"X\"]\ny &lt;- sf::st_coordinates(ke_path)[, \"Y\"]\nlayout &lt;- data.frame(x, y)\n\nThe layout argument can be switched between the function and data frame.\n\nggraph(ke_path, layout = layout_sf) +\n  geom_node_point(size = 0.5) +\n  geom_edge_link(arrow = arrow(length = unit(0.1, \"inches\")))\n\n\n\n\n\n\n\n\nUsing the sf layout.\n\nggraph(ke_path, layout = 'sf') +\n  geom_node_sf() +\n  geom_edge_link()\n\n\n\n\n\n\n\n\nNot sure about the warning (need to look further). Intuitively, I should be able to overlay this onto the map.\n\n# getting world map\nworld &lt;- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\n\nggraph(caribou_path, 'sf') +\n  geom_sf(data = canadianmaps::CD) +\n  geom_node_sf() +\n  geom_edge_link() +\n  theme_grey() +\n  coord_sf(xlim = c(-125, -119), ylim = c(54, 56))\n\n\n\n\n\n\n\nggraph(caribou_path, 'sf') +\n  geom_polygon(data = map_data(\"world\"), mapping = aes(x = long, y = lat, group = group)) +\n  geom_node_sf() +\n  geom_edge_link() +\n  theme_grey()\n\n\n\n\n\n\n\n\nThere is a problem with the ggraph where its coordinates do not match with the sf. I will need to figure this out. (It is fixed now.)\nNext step:\n\nNeed to try linestring geometry.\nStart doing an analysis on the caribou dataset.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Network Analysis Experimentation</span>"
    ]
  },
  {
    "objectID": "caribou-analysis.html",
    "href": "caribou-analysis.html",
    "title": "2  Caribou Analysis",
    "section": "",
    "text": "2.1 Question",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Caribou Analysis</span>"
    ]
  },
  {
    "objectID": "caribou-analysis.html#question",
    "href": "caribou-analysis.html#question",
    "title": "2  Caribou Analysis",
    "section": "",
    "text": "Temporal migration patterns: Analyze how caribou movement changes throughout seasons and years.\nHerd comparison: Compare movement patterns between different herds to identify similarities and differences in behavior.\nIndividual variation: Analyze differences in movement patterns between individual caribou within the same herd.\nHabitat preference: Identify areas where caribou spend more time versus areas they quickly pass through.\nHuman impact assessment: Explore how proximity to human infrastructure (roads, settlements) affects caribou movement.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Caribou Analysis</span>"
    ]
  },
  {
    "objectID": "caribou-analysis.html#temporal-migration-patterns",
    "href": "caribou-analysis.html#temporal-migration-patterns",
    "title": "2  Caribou Analysis",
    "section": "2.2 Temporal migration patterns",
    "text": "2.2 Temporal migration patterns\nMore distance cover in summer than winter. The pattern is more spread out in summer.\nNow there are 3 dataset I have to keep tabs off\n\nlocations |&gt; \n    count(animal_id, study_site, season) |&gt; \n    ggplot(aes(x = season, y = n)) +\n    geom_boxplot() +\n    facet_wrap(~study_site, scales = \"free\")\n\n\n\n\n\n\n\n\nGenerally, there seems to be more movement in the summer than winter, however, this also depends on the different between the number of records in winter and summer as well.\n\n# calculate the time gap\ntime_gap &lt;- locations |&gt; \n    arrange(event_id) |&gt; \n    group_by(animal_id) |&gt; \n    mutate(timestamp_1 = lead(timestamp)) |&gt; \n    filter(!is.na(timestamp_1)) |&gt; \n    mutate(\n        time_gap = lubridate::interval(timestamp, timestamp_1),\n        years = time_gap %/% years(1),\n        months = time_gap %% years(1) %/% months(1),\n        days = time_gap %% years(1) %% months(1) %/% days(1),\n        hours = time_gap %% years(1) %% months(1) %% days(1) %/% hours(1),\n        minutes = time_gap %% years(1) %% months(1) %% days(1) %% hours(1) %/% minutes(1),\n        seconds = time_gap %% years(1) %% months(1) %% days(1) %% hours(1) %% minutes(1) %/% seconds(1)) |&gt; \n    ungroup()\n\n\n# check the negative values\ntime_gap |&gt; \n    filter(years &lt; 0 | months &lt; 0 | days &lt; 0 | hours &lt; 0 | minutes &lt; 0)\n\nEven when arrange by event_id there are still the negative time gap which could suggest that the event_id does not followed the time chronological order. The example of this is down below.\n\nlocations |&gt; \n    filter(event_id %in% c(2259227782:2259227786))\n\n# A tibble: 5 × 7\n    event_id animal_id study_site season timestamp           longitude latitude\n       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;dttm&gt;                  &lt;dbl&gt;    &lt;dbl&gt;\n1 2259227783 GR_CG06   Graham     Summer 2008-06-03 13:18:00     -123.     56.6\n2 2259227782 GR_CG06   Graham     Summer 2008-06-03 22:03:00     -123.     56.6\n3 2259227784 GR_CG06   Graham     Summer 2008-06-04 07:03:00     -123.     56.6\n4 2259227785 GR_CG06   Graham     Summer 2008-06-04 16:03:00     -123.     56.6\n5 2259227786 GR_CG06   Graham     Summer 2008-06-05 01:03:00     -123.     56.6\n\n\nThe logical thing to do then arrange this base on the timestamp assume that the timestamp entry is correct.\n\ntime_gap &lt;- locations |&gt; \n    arrange(timestamp) |&gt; \n    group_by(animal_id) |&gt; \n    mutate(timestamp_1 = lead(timestamp)) |&gt; \n    filter(!is.na(timestamp_1)) |&gt; \n    mutate(\n        time_gap = lubridate::interval(timestamp, timestamp_1),\n        years = time_gap %/% years(1),\n        months = time_gap %% years(1) %/% months(1),\n        days = time_gap %% years(1) %% months(1) %/% days(1),\n        hours = time_gap %% years(1) %% months(1) %% days(1) %/% hours(1),\n        minutes = time_gap %% years(1) %% months(1) %% days(1) %% hours(1) %/% minutes(1),\n        seconds = time_gap %% years(1) %% months(1) %% days(1) %% hours(1) %% minutes(1) %/% seconds(1)) |&gt; \n    ungroup()\n\n\n# check the negative values\ntime_gap |&gt; \n    filter(years &lt; 0 | months &lt; 0 | days &lt; 0 | hours &lt; 0)\n\n\nsummary_gap &lt;- time_gap |&gt; \n    group_by(animal_id, season) |&gt; \n    summarise(\n        years = sum(years),\n        months = sum(months),\n        days = sum(days),\n        hours = sum(hours),\n        minutes = sum(minutes),\n        nodes = n()\n    )\n\nsummary_gap\n\n\ncaribou_graph |&gt; \n    activate(\"nodes\") |&gt; \n    filter(study_site == \"Graham\") |&gt;\n    ggraph('sf') +\n    geom_sf(data = canadianmaps::CD) +\n    geom_node_sf(color = \"red\", alpha = 0.2) +\n    coord_sf(xlim = c(-125, -121), ylim = c(54, 58)) +\n    theme(aspect.ratio = 1) +\n    facet_wrap(~season)\n\n\n\n\n\n\n\n\n\ngraham &lt;- readRDS(here::here(\"data/graham.rds\"))\n\nggmap(graham) +\n    geom_point(data = nodes |&gt; filter(study_site == \"Graham\"), \n    mapping = aes(x = longitude, y = latitude), alpha = 0.2, color = \"red\") +\n    facet_wrap(~season)\n\n\n\n\n\n\n\n\n\nggmap(graham) +\n    geom_point(data = nodes |&gt; filter(study_site == \"Graham\"),\n        mapping = aes(x = longitude, y = latitude), alpha = 0.2, color = \"red\") +\n    geom_edge_link(data = caribou_graph |&gt; activate(edges))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Caribou Analysis</span>"
    ]
  },
  {
    "objectID": "caribou-analysis.html#time-irregularities",
    "href": "caribou-analysis.html#time-irregularities",
    "title": "2  Caribou Analysis",
    "section": "2.3 Time irregularities",
    "text": "2.3 Time irregularities\n\nlocations |&gt; \n    ggplot(aes(x = timestamp, y = animal_id)) +\n    geom_point() +\n    facet_wrap(~study_site,\n        scales = \"free_y\")\n\n\n\n\n\n\n\n\nI want to visualise the time gap between the animal_id so that I could aggregate the irregularities in the time interval. The interesting point that I have not notice before is that there are actually two groups of caribou in the graham study site. One between 2001 to 2004 and 2008 to 2011, about 3 years period.\n\ncalibou_graham &lt;- locations |&gt; \n    filter(study_site == \"Graham\") |&gt; \n    mutate(group = ifelse(str_detect(animal_id, \"GR_GC\"), 2009, 2002))\n\nggmap(graham) +\n    geom_point(data = calibou_graham, \n    mapping = aes(x = longitude, y = latitude), alpha = 0.2, color = \"red\") +\n    facet_wrap(~season + group)\n\n\n\n\n\n\n\n\nWe now need to find the maximum time interval.\n\ncalibou_gap &lt;- calibou_graham |&gt; \n    group_by(group, animal_id) |&gt; \n    arrange(animal_id, timestamp) |&gt; \n    mutate(timestamp_1 = lead(timestamp)) |&gt; \n    filter(!is.na(timestamp_1)) |&gt; \n    mutate(time_gap = as.numeric(timestamp_1 - timestamp, units = \"mins\")) |&gt; \n    ungroup()\n\ncalibou_gap |&gt; \n    ggplot(aes(x = time_gap)) +\n    geom_histogram(binwidth = 240) +\n    scale_x_continuous(limits = c(0, 10000))\n\nWarning: Removed 111 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\ncalibou_gap |&gt; \n    group_by(group) |&gt; \n    count(time_gap) |&gt; \n    arrange(-n)\n\n# A tibble: 486 × 3\n# Groups:   group [2]\n   group time_gap     n\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;\n 1  2009      540 14927\n 2  2002      240 13448\n 3  2002      480  4032\n 4  2002      239  2284\n 5  2002      241  2233\n 6  2009      539  2119\n 7  2009      541  2096\n 8  2002      720  1635\n 9  2002      479   814\n10  2002      960   767\n# ℹ 476 more rows\n\n\nGR_GC02 has the largest time gap at 214139 minutes. The most common time gap is 540 minutes for the 2009 group, while the most common time gap for the 2002 group is 240 minutes.\n\ntsib_calibou &lt;- as_tsibble(calibou_graham, key = animal_id)\n\ntsib_calibou |&gt; tsibble::count_gaps()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Caribou Analysis</span>"
    ]
  },
  {
    "objectID": "caribou-analysis.html#scagnostics",
    "href": "caribou-analysis.html#scagnostics",
    "title": "2  Caribou Analysis",
    "section": "2.4 Scagnostics",
    "text": "2.4 Scagnostics\n\ncalibou_graham |&gt; \n  select(longitude, latitude, group) |&gt; \n  mutate(longitude = as.integer(longitude * 10000),\n         latitude = as.integer(latitude * 10000)) |&gt; \n  filter(group == 2002) |&gt; \n  summarise(calc_scags(latitude, longitude, scags = c(\"outlying\")))\n\n\ncalibou_graham_2002 &lt;- calibou_graham |&gt; \n    filter(group == 2002)\n\nsc_sparse2(calibou_graham_2002$longitude, calibou_graham_2002$latitude)\n\n[1] 0.9539677\n\nsc_convex(calibou_graham_2002$longitude, calibou_graham_2002$latitude)\n\n[1] 0.07620156",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Caribou Analysis</span>"
    ]
  }
]